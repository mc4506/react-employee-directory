{"version":3,"sources":["components/Navbar.js","components/Header.js","components/FormAlertMessage.js","components/AddEmployeeForm.js","components/TableHeadings.js","components/TableBody.js","components/EmployeeRow.js","components/SearchForm.js","components/EmployeeTable.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","location","useLocation","useState","isNavCollapsed","setIsNavCollpased","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","id","pathname","Header","FormAlertMessage","props","hasError","role","validEmail","email","test","validPhoneNumber","phone","styles","invalid","color","React","Component","span","cursor","TableHeading","handleSortAsc","event","sortAsc","target","dataset","key","handleSortDesc","sortDesc","scope","data-key","style","this","TableBody","children","EmployeeRow","employeeId","firstName","lastName","title","phoneNumber","SearchForm","state","searchField","searchTerm","invalidSearchField","invalidSearchTerm","handleInputChange","value","name","setState","handleFilter","preventDefault","filterRecords","handleShowAll","showAll","htmlFor","onChange","EmployeeTable","employees","sort","a","b","filteredEmployees","filter","employee","showAllRecords","TableHeadings","map","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.44417bc3.chunk.js","sourcesContent":["// links to AddEmployee and EmployeeTable\nimport React, { useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nfunction Navbar() {\n    const location = useLocation();\n    const [isNavCollapsed, setIsNavCollpased] = useState(true);\n\n    function handleNavCollpase() {\n        setIsNavCollpased(!isNavCollapsed)\n    }\n\n\treturn (\n\t\t<nav className=\"navbar navbar-expand-md navbar-dark bg-primary\">\n\t\t\t<Link to=\"/\" className=\"navbar-brand\">\n\t\t\t\tReact Employee Directory App\n\t\t\t</Link>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" \n                data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded={!isNavCollapsed ? true : false} aria-label=\"Toggle navigation\"\n                onClick={handleNavCollpase}>\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className={`${isNavCollapsed ? 'collapse' : ''} navbar-collapse`} id=\"navbarNav\">\n                <ul className=\"navbar-nav\">\n                {/* <li className=\"nav-item\">\n                    <Link to=\"/add-employee\" className={location.pathname===\"/add-employee\" ? \"nav-link active\" : \"nav-link\"}>\n                        Add Employee\n                    </Link>\n                </li> */}\n                <li className=\"nav-item\">\n                    <Link to=\"/react-employee-directory\" className={location.pathname===\"/react-employee-directory\" ? \"nav-link active\" : \"nav-link\"}>\n                        Employee Directory\n                    </Link>\n                </li>\n                </ul>\n            </div>\n\t\t</nav>\n\t);\n}\n\nexport default Navbar;\n","// page header \"Employee Directory\"\nimport React from 'react';\nimport Navbar from './Navbar.js';\n\nfunction Header () {\n    return(\n        <header>\n            <Navbar></Navbar>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nfunction FormAlertMessage(props) {\n    return (\n        <div className={props.hasError ? \"\" : \"d-none\"}>\n            <div className=\"alert alert-warning\" role=\"alert\">\n                <strong>Invalid form entries</strong> See below for fields that needs correction.\n            </div>\n        </div>\n    )\n}\n\nexport default FormAlertMessage;","// react form to add employee info\n// firstName, lastName, email, phoneNumber, title(select from dropdown), department (select from drop down)\n// Submit button to use fs to write to employees.json\n\nimport React from 'react';\nimport FormAlertMessage from \"./FormAlertMessage\";\n\nconst validEmail = email => {\n    const emailRegex = /^[a-zA-Z\\d\\-_.]+@[a-zA-Z\\d]+\\.[a-zA-Z\\d]{2,}$/i;\n    return (emailRegex.test(email));\n}\n\nconst validPhoneNumber = phone => {\n    const phoneRegex = /^[0-9]{3}-[0-9]{3}-[0-9]{4}$/;\n    return (phoneRegex.test(phone));\n}\n\nconst styles = {\n    invalid: {\n        color: \"red\"\n    }\n}\n\nclass AddEmployeeForm extends React.Component {\n\n    state = {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        phoneNumber: \"\",\n        title: \"---\",\n        hasFormError: false,\n        invalidEmail: false,\n        invalidPhone: false,\n        invalidTitle: false\n    };\n\n    handleInputChange = event => {\n        // console.log(event.target.name);\n        const value = event.target.value;\n        const name = event.target.name;\n    \n        this.setState({\n          [name]: value\n        });\n\n        //format phone numbers\n        if(this.state.phoneNumber.length === 3) {\n            this.setState( {\n                phoneNumber: this.state.phoneNumber + \"-\"\n            });\n        }\n        if(this.state.phoneNumber.length === 7) {\n            this.setState( {\n                phoneNumber: this.state.phoneNumber + \"-\"\n            });\n        }\n    };\n\n    handleFormSubmit = event => {\n        event.preventDefault();\n        // reset states to false\n        this.setState( {\n            hasFormError: false,\n            invalidEmail: false,\n            invalidPhone: false,\n            invalidTitle: false\n        });\n\n        if(!validEmail(this.state.email)) {\n            this.setState( {\n                hasFormError: true,\n                invalidEmail: true\n            });\n        };\n        if(!validPhoneNumber(this.state.phoneNumber)) {\n            this.setState( {\n                hasFormError: true,\n                invalidPhone: true\n            });\n        };\n        if(this.state.title === '---') {\n            this.setState( {\n                hasFormError: true,\n                invalidTitle: true\n            });\n        }\n\n        // if(!this.state.hasFormError) {\n        //     let record = {\n        //         firstName: this.state.firstName,\n        //         lastName: this.state.lastName,\n        //         email: this.state.email,\n        //         phoneNumber: this.state.phoneNumber,\n        //         title: this.state.title\n        //     };\n\n        // }\n\n    }\n\n    render() {\n        return(\n            <div>\n                <h1>FORM NOT CONNECTED TO BACKEND</h1>\n                <FormAlertMessage hasError={this.state.hasFormError}></FormAlertMessage>\n                <form className=\"container my-4\" onSubmit={this.handleFormSubmit}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"firstName\">First Name</label>\n                        <input type=\"text\" className=\"form-control\" id=\"firstName\" required\n                            name=\"firstName\" \n                            value={this.state.firstName}\n                            onChange={this.handleInputChange}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"lastName\">Last Name</label>\n                        <input type=\"text\" className=\"form-control\" id=\"lastName\" required\n                            name=\"lastName\" \n                            value={this.state.lastName}\n                            onChange={this.handleInputChange}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"email\">Email <span style={styles.invalid}>{this.state.invalidEmail && \"Invalid Email Entry\"}</span></label>\n                        <input type=\"email\" className=\"form-control\" id=\"email\" required\n                            name=\"email\" \n                            value={this.state.email}\n                            onChange={this.handleInputChange}\n                        />\n                        <small id=\"emailHelpBlock\" className=\"form-text text-muted\">Format: name@domain.com</small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"phoneNumber\">Phone Number <span style={styles.invalid}>{this.state.invalidPhone && \"Invalid Phone Number Entry\"}</span></label>\n                        <input type=\"tel\" className=\"form-control\" id=\"phoneNumber\" maxLength=\"12\" required\n                            name=\"phoneNumber\" \n                            value={this.state.phoneNumber}\n                            onChange={this.handleInputChange}\n                        />\n                        <small id=\"phoneHelpBlock\" className=\"form-text text-muted\">Format: 123-456-7890</small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"title\">Title <span style={styles.invalid}>{this.state.invalidTitle && \"Select a Valid title\"}</span></label>\n                        <select className=\"form-control\" id=\"title\" \n                            name=\"title\"\n                            onChange={this.handleInputChange}>\n                                <option value=\"---\">---</option>\n                                <option value=\"Engineer\">Engineer</option>\n                                <option value=\"Senior Engineer\">Senior Engineer</option>\n                                <option value=\"Project Manager\">Project Manager</option>\n                                <option value=\"Project Director\">Project Director</option>\n                                <option value=\"CEO\">CEO</option>\n                        </select>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                </form>\n            </div>\n        )\n    }\n};\n\nexport default AddEmployeeForm;\n","// Employee table headings\nimport React from 'react';\n\nconst styles = {\n    span: {\n        cursor: \"pointer\"\n    }\n}\n\nclass TableHeading extends React.Component {\n \n    handleSortAsc = (event) => {\n        //use data-key to get name of key to pass as argument into sort methods\n        this.props.sortAsc(event.target.dataset.key);\n    }\n    handleSortDesc = (event) => {\n        this.props.sortDesc(event.target.dataset.key);\n    }\n\n    render() {\n        return (\n            <thead>\n                <tr>\n                    <th scope=\"col\">Employee Id \n                        <span data-key=\"id\" style={styles.span} onClick={this.handleSortAsc}>&#9650;</span>\n                        <span data-key=\"id\" style={styles.span} onClick={this.handleSortDesc}>&#9660;</span>\n                    </th>\n                    <th scope=\"col\">First Name \n                        <span data-key=\"firstName\" style={styles.span} onClick={this.handleSortAsc}>&#9650;</span>\n                        <span data-key=\"firstName\" style={styles.span} onClick={this.handleSortDesc}>&#9660;</span>\n                    </th>\n                    <th scope=\"col\">Last Name\n                        <span data-key=\"lastName\" style={styles.span} onClick={this.handleSortAsc}>&#9650;</span>\n                        <span data-key=\"lastName\" style={styles.span} onClick={this.handleSortDesc}>&#9660;</span>\n                    </th>\n                    <th scope=\"col\">Title\n                        <span data-key=\"title\" style={styles.span} onClick={this.handleSortAsc}>&#9650;</span>\n                        <span data-key=\"title\" style={styles.span} onClick={this.handleSortDesc}>&#9660;</span>\n                    </th>\n                    <th scope=\"col\">Email\n                        <span data-key=\"email\" style={styles.span} onClick={this.handleSortAsc}>&#9650;</span>\n                        <span data-key=\"email\" style={styles.span} onClick={this.handleSortDesc}>&#9660;</span>                \n                    </th>\n                    <th scope=\"col\">Phone Number\n                        <span data-key=\"phoneNumber\" style={styles.span} onClick={this.handleSortAsc}>&#9650;</span>\n                        <span data-key=\"phoneNumber\" style={styles.span} onClick={this.handleSortDesc}>&#9660;</span>\n                    </th>\n                </tr>\n            </thead>\n        )\n    }\n}\n\nexport default TableHeading;","import React from 'react';\n\nfunction TableBody(props) {\n        return(\n            <tbody>\n                {props.children}\n            </tbody>\n        )\n}\n\nexport default TableBody;","// Row of employee info\n// include button to delete and edit employee\nimport React from 'react';\n\nfunction EmployeeRow(props) {\n    return (\n        <tr>\n            <th scope=\"row\">{props.employeeId}</th>\n            <td>{props.firstName}</td>\n            <td>{props.lastName}</td>\n            <td>{props.title}</td>\n            <td>{props.email}</td>\n            <td>{props.phoneNumber}</td>\n        </tr>\n    )\n};\n\nexport default EmployeeRow;","import React from 'react';\n\nconst styles = {\n    span: {\n        color: \"red\"\n    }\n}\n\nclass SearchForm extends React.Component {\n\n    state = {\n        searchField: \"---\",\n        searchTerm: \"\",\n        invalidSearchField: false,\n        invalidSearchTerm: false\n    }\n\n    handleInputChange = event => {\n        // console.log(event.target.name);\n        const value = event.target.value;\n        const name = event.target.name;\n    \n        this.setState({\n          [name]: value\n        });\n    };\n\n    handleFilter = (event) => {\n        // reset states\n        this.setState({\n            invalidSearchField: false,\n            invalidSearchTerm: false\n        });\n        event.preventDefault();\n        if (this.state.searchField === '---') {\n            this.setState({ invalidSearchField: true })\n        } else if (this.state.searchTerm === '') {\n            this.setState({ invalidSearchTerm: true })\n        } else {\n            this.props.filterRecords(this.state.searchField, this.state.searchTerm);\n        }\n    }\n\n    handleShowAll = (event) => {\n        event.preventDefault();\n        this.props.showAll();\n    }\n    \n    render() {\n        return (\n            <form className=\"container p-4 bg-light\">\n                <div className=\"form-row\">\n                    <div className=\"form-group col-md-4\">\n                        <label htmlFor=\"searchField\">Select Field \n                            <span style={styles.span}>\n                                {this.state.invalidSearchField === true && ' Select a Search Field'}\n                            </span></label>\n                        <select className=\"form-control\" id=\"searchField\" \n                            name=\"searchField\"\n                            onChange={this.handleInputChange}>\n                                <option value=\"---\">---</option>\n                                <option value=\"id\">Employee Id</option>\n                                <option value=\"firstName\">First Name</option>\n                                <option value=\"lastName\">Last Name</option>\n                                <option value=\"title\">Title</option>\n                        </select>\n                    </div>\n                    <div className=\"form-group col-md-8\">\n                        <label htmlFor=\"searchTerm\">Enter Search Term\n                            <span style={styles.span}>\n                                {this.state.invalidSearchTerm === true && ' Please enter search term'}\n                            </span>\n                        </label>\n                        <input type=\"text\" className=\"form-control\" id=\"searchTerm\"\n                            name=\"searchTerm\" \n                            value={this.state.searchTerm}\n                            onChange={this.handleInputChange}\n                        />\n                    </div>\n                </div>\n                <div className=\"col\">\n                    <button type=\"submit\" className=\"btn btn-primary mx-4\" onClick={this.handleFilter}>Search</button>\n                    <button type=\"submit\" className=\"btn btn-secondary\" onClick={this.handleShowAll}>Clear Search</button>\n                </div>\n            </form>\n        )\n    }\n};\n\nexport default SearchForm;","// Employee table\nimport React from 'react';\nimport TableHeadings from './TableHeadings';\nimport TableBody from './TableBody';\nimport EmployeeRow from './EmployeeRow';\nimport SearchForm from './SearchForm';\nimport employees from \"../employees.json\";\n\n\nclass EmployeeTable extends React.Component {\n    state = {\n        employees: employees\n    }\n\n    sortAsc = (key) => {\n        this.setState({\n            employees: employees.sort( (a, b) => {\n                if(a[key] > b[key]) return 1;\n                if(a[key] < b[key]) return -1;\n                return 0;\n            })\n        })\n    }\n    sortDesc = (key) => {\n        this.setState({\n            employees: employees.sort( (a, b) => {\n                if(b[key] > a[key]) return 1;\n                if(b[key] < a[key]) return -1;\n                return 0;\n            })\n        })\n    }\n\n    filterRecords = (key, value) => {\n        let filteredEmployees = employees.filter( employee => {\n            return (employee[key] == value)\n        })\n\n        this.setState({ employees: filteredEmployees })\n    }\n\n    showAllRecords = () => {\n        this.setState({employees: employees});\n    }\n\n\n    render() {\n        return (\n            <div>\n                <SearchForm filterRecords={this.filterRecords} showAll={this.showAllRecords}/>\n                <table className=\"container table table-striped\">\n                    <TableHeadings sortAsc={this.sortAsc} sortDesc={this.sortDesc}/>\n                    <TableBody>\n                    {this.state.employees.map( employee => \n                        <EmployeeRow \n                            employeeId={employee.id}\n                            firstName={employee.firstName}\n                            lastName={employee.lastName}\n                            title={employee.title}\n                            email={employee.email}\n                            phoneNumber={employee.phoneNumber}\n                            key={`key${employee.id}`}\n                        />\n                    )}\n                    </TableBody>\n                </table>\n            </div>\n        )\n    }\n};\n\nexport default EmployeeTable;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport AddEmployeeForm from './components/AddEmployeeForm';\nimport EmployeeTable from './components/EmployeeTable';\n\n// write to employee.json file using async fs \n\nfunction App() {\n  return (\n    <Router>\n      <Header></Header>\n      {/* <Route exact path=\"/add-employee\" component={AddEmployeeForm} /> */}\n      <Route exact path=\"/react-employee-directory\" component={EmployeeTable} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}